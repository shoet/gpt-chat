// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package interfaces

import (
	"github.com/shoet/gpt-chat/models"
	"sync"
)

// Ensure, that ChatGPTMock does implement ChatGPT.
// If this is not the case, regenerate this file with moq.
var _ ChatGPT = &ChatGPTMock{}

// ChatGPTMock is a mock implementation of ChatGPT.
//
//	func TestSomethingThatUsesChatGPT(t *testing.T) {
//
//		// make and configure a mocked ChatGPT
//		mockedChatGPT := &ChatGPTMock{
//			ChatFunc: func(message *models.ChatMessage) (*models.ChatMessage, error) {
//				panic("mock out the Chat method")
//			},
//		}
//
//		// use mockedChatGPT in code that requires ChatGPT
//		// and then make assertions.
//
//	}
type ChatGPTMock struct {
	// ChatFunc mocks the Chat method.
	ChatFunc func(message *models.ChatMessage) (*models.ChatMessage, error)

	// calls tracks calls to the methods.
	calls struct {
		// Chat holds details about calls to the Chat method.
		Chat []struct {
			// Message is the message argument value.
			Message *models.ChatMessage
		}
	}
	lockChat sync.RWMutex
}

// Chat calls ChatFunc.
func (mock *ChatGPTMock) Chat(message *models.ChatMessage) (*models.ChatMessage, error) {
	if mock.ChatFunc == nil {
		panic("ChatGPTMock.ChatFunc: method is nil but ChatGPT.Chat was just called")
	}
	callInfo := struct {
		Message *models.ChatMessage
	}{
		Message: message,
	}
	mock.lockChat.Lock()
	mock.calls.Chat = append(mock.calls.Chat, callInfo)
	mock.lockChat.Unlock()
	return mock.ChatFunc(message)
}

// ChatCalls gets all the calls that were made to Chat.
// Check the length with:
//
//	len(mockedChatGPT.ChatCalls())
func (mock *ChatGPTMock) ChatCalls() []struct {
	Message *models.ChatMessage
} {
	var calls []struct {
		Message *models.ChatMessage
	}
	mock.lockChat.RLock()
	calls = mock.calls.Chat
	mock.lockChat.RUnlock()
	return calls
}
