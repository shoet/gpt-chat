// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package interfaces

import (
	"github.com/shoet/gpt-chat/models"
	"sync"
)

// Ensure, that ChatGPTMock does implement ChatGPT.
// If this is not the case, regenerate this file with moq.
var _ ChatGPT = &ChatGPTMock{}

// ChatGPTMock is a mock implementation of ChatGPT.
//
//	func TestSomethingThatUsesChatGPT(t *testing.T) {
//
//		// make and configure a mocked ChatGPT
//		mockedChatGPT := &ChatGPTMock{
//			ChatFunc: func(message *models.ChatMessage, option *models.ChatMessageOption) (*models.ChatMessage, error) {
//				panic("mock out the Chat method")
//			},
//			SummaryFunc: func(request *models.ChatMessage, answer *models.ChatMessage) (string, error) {
//				panic("mock out the Summary method")
//			},
//		}
//
//		// use mockedChatGPT in code that requires ChatGPT
//		// and then make assertions.
//
//	}
type ChatGPTMock struct {
	// ChatFunc mocks the Chat method.
	ChatFunc func(message *models.ChatMessage, option *models.ChatMessageOption) (*models.ChatMessage, error)

	// SummaryFunc mocks the Summary method.
	SummaryFunc func(request *models.ChatMessage, answer *models.ChatMessage) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Chat holds details about calls to the Chat method.
		Chat []struct {
			// Message is the message argument value.
			Message *models.ChatMessage
			// Option is the option argument value.
			Option *models.ChatMessageOption
		}
		// Summary holds details about calls to the Summary method.
		Summary []struct {
			// Request is the request argument value.
			Request *models.ChatMessage
			// Answer is the answer argument value.
			Answer *models.ChatMessage
		}
	}
	lockChat    sync.RWMutex
	lockSummary sync.RWMutex
}

// Chat calls ChatFunc.
func (mock *ChatGPTMock) Chat(message *models.ChatMessage, option *models.ChatMessageOption) (*models.ChatMessage, error) {
	if mock.ChatFunc == nil {
		panic("ChatGPTMock.ChatFunc: method is nil but ChatGPT.Chat was just called")
	}
	callInfo := struct {
		Message *models.ChatMessage
		Option  *models.ChatMessageOption
	}{
		Message: message,
		Option:  option,
	}
	mock.lockChat.Lock()
	mock.calls.Chat = append(mock.calls.Chat, callInfo)
	mock.lockChat.Unlock()
	return mock.ChatFunc(message, option)
}

// ChatCalls gets all the calls that were made to Chat.
// Check the length with:
//
//	len(mockedChatGPT.ChatCalls())
func (mock *ChatGPTMock) ChatCalls() []struct {
	Message *models.ChatMessage
	Option  *models.ChatMessageOption
} {
	var calls []struct {
		Message *models.ChatMessage
		Option  *models.ChatMessageOption
	}
	mock.lockChat.RLock()
	calls = mock.calls.Chat
	mock.lockChat.RUnlock()
	return calls
}

// Summary calls SummaryFunc.
func (mock *ChatGPTMock) Summary(request *models.ChatMessage, answer *models.ChatMessage) (string, error) {
	if mock.SummaryFunc == nil {
		panic("ChatGPTMock.SummaryFunc: method is nil but ChatGPT.Summary was just called")
	}
	callInfo := struct {
		Request *models.ChatMessage
		Answer  *models.ChatMessage
	}{
		Request: request,
		Answer:  answer,
	}
	mock.lockSummary.Lock()
	mock.calls.Summary = append(mock.calls.Summary, callInfo)
	mock.lockSummary.Unlock()
	return mock.SummaryFunc(request, answer)
}

// SummaryCalls gets all the calls that were made to Summary.
// Check the length with:
//
//	len(mockedChatGPT.SummaryCalls())
func (mock *ChatGPTMock) SummaryCalls() []struct {
	Request *models.ChatMessage
	Answer  *models.ChatMessage
} {
	var calls []struct {
		Request *models.ChatMessage
		Answer  *models.ChatMessage
	}
	mock.lockSummary.RLock()
	calls = mock.calls.Summary
	mock.lockSummary.RUnlock()
	return calls
}

// Ensure, that StorageMock does implement Storage.
// If this is not the case, regenerate this file with moq.
var _ Storage = &StorageMock{}

// StorageMock is a mock implementation of Storage.
//
//	func TestSomethingThatUsesStorage(t *testing.T) {
//
//		// make and configure a mocked Storage
//		mockedStorage := &StorageMock{
//			AddChatMessageFunc: func(message *models.ChatMessage) error {
//				panic("mock out the AddChatMessage method")
//			},
//			AddSummaryFunc: func(summary *models.ChatSummary) error {
//				panic("mock out the AddSummary method")
//			},
//			ListChatHistoryFunc: func(category string, latest int) (models.ChatMessages, error) {
//				panic("mock out the ListChatHistory method")
//			},
//			ListChatSummaryFunc: func(category string, latest int) ([]*models.ChatSummary, error) {
//				panic("mock out the ListChatSummary method")
//			},
//		}
//
//		// use mockedStorage in code that requires Storage
//		// and then make assertions.
//
//	}
type StorageMock struct {
	// AddChatMessageFunc mocks the AddChatMessage method.
	AddChatMessageFunc func(message *models.ChatMessage) error

	// AddSummaryFunc mocks the AddSummary method.
	AddSummaryFunc func(summary *models.ChatSummary) error

	// ListChatHistoryFunc mocks the ListChatHistory method.
	ListChatHistoryFunc func(category string, latest int) (models.ChatMessages, error)

	// ListChatSummaryFunc mocks the ListChatSummary method.
	ListChatSummaryFunc func(category string, latest int) ([]*models.ChatSummary, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddChatMessage holds details about calls to the AddChatMessage method.
		AddChatMessage []struct {
			// Message is the message argument value.
			Message *models.ChatMessage
		}
		// AddSummary holds details about calls to the AddSummary method.
		AddSummary []struct {
			// Summary is the summary argument value.
			Summary *models.ChatSummary
		}
		// ListChatHistory holds details about calls to the ListChatHistory method.
		ListChatHistory []struct {
			// Category is the category argument value.
			Category string
			// Latest is the latest argument value.
			Latest int
		}
		// ListChatSummary holds details about calls to the ListChatSummary method.
		ListChatSummary []struct {
			// Category is the category argument value.
			Category string
			// Latest is the latest argument value.
			Latest int
		}
	}
	lockAddChatMessage  sync.RWMutex
	lockAddSummary      sync.RWMutex
	lockListChatHistory sync.RWMutex
	lockListChatSummary sync.RWMutex
}

// AddChatMessage calls AddChatMessageFunc.
func (mock *StorageMock) AddChatMessage(message *models.ChatMessage) error {
	if mock.AddChatMessageFunc == nil {
		panic("StorageMock.AddChatMessageFunc: method is nil but Storage.AddChatMessage was just called")
	}
	callInfo := struct {
		Message *models.ChatMessage
	}{
		Message: message,
	}
	mock.lockAddChatMessage.Lock()
	mock.calls.AddChatMessage = append(mock.calls.AddChatMessage, callInfo)
	mock.lockAddChatMessage.Unlock()
	return mock.AddChatMessageFunc(message)
}

// AddChatMessageCalls gets all the calls that were made to AddChatMessage.
// Check the length with:
//
//	len(mockedStorage.AddChatMessageCalls())
func (mock *StorageMock) AddChatMessageCalls() []struct {
	Message *models.ChatMessage
} {
	var calls []struct {
		Message *models.ChatMessage
	}
	mock.lockAddChatMessage.RLock()
	calls = mock.calls.AddChatMessage
	mock.lockAddChatMessage.RUnlock()
	return calls
}

// AddSummary calls AddSummaryFunc.
func (mock *StorageMock) AddSummary(summary *models.ChatSummary) error {
	if mock.AddSummaryFunc == nil {
		panic("StorageMock.AddSummaryFunc: method is nil but Storage.AddSummary was just called")
	}
	callInfo := struct {
		Summary *models.ChatSummary
	}{
		Summary: summary,
	}
	mock.lockAddSummary.Lock()
	mock.calls.AddSummary = append(mock.calls.AddSummary, callInfo)
	mock.lockAddSummary.Unlock()
	return mock.AddSummaryFunc(summary)
}

// AddSummaryCalls gets all the calls that were made to AddSummary.
// Check the length with:
//
//	len(mockedStorage.AddSummaryCalls())
func (mock *StorageMock) AddSummaryCalls() []struct {
	Summary *models.ChatSummary
} {
	var calls []struct {
		Summary *models.ChatSummary
	}
	mock.lockAddSummary.RLock()
	calls = mock.calls.AddSummary
	mock.lockAddSummary.RUnlock()
	return calls
}

// ListChatHistory calls ListChatHistoryFunc.
func (mock *StorageMock) ListChatHistory(category string, latest int) (models.ChatMessages, error) {
	if mock.ListChatHistoryFunc == nil {
		panic("StorageMock.ListChatHistoryFunc: method is nil but Storage.ListChatHistory was just called")
	}
	callInfo := struct {
		Category string
		Latest   int
	}{
		Category: category,
		Latest:   latest,
	}
	mock.lockListChatHistory.Lock()
	mock.calls.ListChatHistory = append(mock.calls.ListChatHistory, callInfo)
	mock.lockListChatHistory.Unlock()
	return mock.ListChatHistoryFunc(category, latest)
}

// ListChatHistoryCalls gets all the calls that were made to ListChatHistory.
// Check the length with:
//
//	len(mockedStorage.ListChatHistoryCalls())
func (mock *StorageMock) ListChatHistoryCalls() []struct {
	Category string
	Latest   int
} {
	var calls []struct {
		Category string
		Latest   int
	}
	mock.lockListChatHistory.RLock()
	calls = mock.calls.ListChatHistory
	mock.lockListChatHistory.RUnlock()
	return calls
}

// ListChatSummary calls ListChatSummaryFunc.
func (mock *StorageMock) ListChatSummary(category string, latest int) ([]*models.ChatSummary, error) {
	if mock.ListChatSummaryFunc == nil {
		panic("StorageMock.ListChatSummaryFunc: method is nil but Storage.ListChatSummary was just called")
	}
	callInfo := struct {
		Category string
		Latest   int
	}{
		Category: category,
		Latest:   latest,
	}
	mock.lockListChatSummary.Lock()
	mock.calls.ListChatSummary = append(mock.calls.ListChatSummary, callInfo)
	mock.lockListChatSummary.Unlock()
	return mock.ListChatSummaryFunc(category, latest)
}

// ListChatSummaryCalls gets all the calls that were made to ListChatSummary.
// Check the length with:
//
//	len(mockedStorage.ListChatSummaryCalls())
func (mock *StorageMock) ListChatSummaryCalls() []struct {
	Category string
	Latest   int
} {
	var calls []struct {
		Category string
		Latest   int
	}
	mock.lockListChatSummary.RLock()
	calls = mock.calls.ListChatSummary
	mock.lockListChatSummary.RUnlock()
	return calls
}
