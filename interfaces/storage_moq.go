// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package interfaces

import (
	"github.com/shoet/gpt-chat/models"
	"sync"
)

// Ensure, that StorageMock does implement Storage.
// If this is not the case, regenerate this file with moq.
var _ Storage = &StorageMock{}

// StorageMock is a mock implementation of Storage.
//
//	func TestSomethingThatUsesStorage(t *testing.T) {
//
//		// make and configure a mocked Storage
//		mockedStorage := &StorageMock{
//			SaveChatHistoryFunc: func(message *models.ChatMessage) error {
//				panic("mock out the SaveChatHistory method")
//			},
//		}
//
//		// use mockedStorage in code that requires Storage
//		// and then make assertions.
//
//	}
type StorageMock struct {
	// SaveChatHistoryFunc mocks the SaveChatHistory method.
	SaveChatHistoryFunc func(message *models.ChatMessage) error

	// calls tracks calls to the methods.
	calls struct {
		// SaveChatHistory holds details about calls to the SaveChatHistory method.
		SaveChatHistory []struct {
			// Message is the message argument value.
			Message *models.ChatMessage
		}
	}
	lockSaveChatHistory sync.RWMutex
}

// SaveChatHistory calls SaveChatHistoryFunc.
func (mock *StorageMock) SaveChatHistory(message *models.ChatMessage) error {
	if mock.SaveChatHistoryFunc == nil {
		panic("StorageMock.SaveChatHistoryFunc: method is nil but Storage.SaveChatHistory was just called")
	}
	callInfo := struct {
		Message *models.ChatMessage
	}{
		Message: message,
	}
	mock.lockSaveChatHistory.Lock()
	mock.calls.SaveChatHistory = append(mock.calls.SaveChatHistory, callInfo)
	mock.lockSaveChatHistory.Unlock()
	return mock.SaveChatHistoryFunc(message)
}

// SaveChatHistoryCalls gets all the calls that were made to SaveChatHistory.
// Check the length with:
//
//	len(mockedStorage.SaveChatHistoryCalls())
func (mock *StorageMock) SaveChatHistoryCalls() []struct {
	Message *models.ChatMessage
} {
	var calls []struct {
		Message *models.ChatMessage
	}
	mock.lockSaveChatHistory.RLock()
	calls = mock.calls.SaveChatHistory
	mock.lockSaveChatHistory.RUnlock()
	return calls
}
